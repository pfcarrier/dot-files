#!/usr/bin/env bash

if [[ -z "$1" ]] ; then
  echo "FATAL: args required.  You likely want to run"
  echo "       $0 apt repos clean init"
  exit 1
fi

set -exo pipefail

for args in "$@" ; do
  case "${args}" in
    apt)
      apt-get update
      apt-get install -y \
        vim \
        nvim \
        curl \
        golang \
        git \
        tmate \
        tmux \
        mosh \
        tree
      ;;
    brew)
      brew install \
        coreutils \
        vim \
        neovim/neovim/neovim \
        curl \
        golang \
        git \
        tmate \
        tmux \
        mosh \
        tree
      ;;
    clean)
      rm -f \
        ~/.vimrc \
        ~/.config/nvim/init.vim \
        ~/.gitconfig \
        ~/.bash_profile
      ;;
    init)
      curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      mkdir -p ~/.config/nvim/
      ln -s ~/.vimrc ~/.config/nvim/init.vim
      ln -s $HOME/work/dot-files/vim/vimrc ~/.vimrc
      ln -s $HOME/work/dot-files/gitconfig ~/.gitconfig
      ln -s $HOME/work/dot-files/bash_profile ~/.bash_profile
      vim -E -c PlugInstall -c q -c q
      vim -E -c GoInstallBinaries -c q -c q
      [[ $(which nvim) > /dev/null ]] && nvim -E -c PlugInstall -c q -c q
      [[ $(which nvim) > /dev/null ]] && nvim -E -c GoInstallBinaries -c q -c q
      #vim -E -c GoUpdateBinaries -c q -c q
      #nvim -E -c GoUpdateBinaries -c q -c q
      ;;
    linux)
      exec bash $0 apt repos clean init
      ;;
    macos)
      exec bash $0 brew repos clean init
      ;;
    repos)
      (
        mkdir -p ~/work
        cd ~/work
        [[ ! -e wa-devenv ]] && git clone git@github.com:Liaison-Intl/wa-devenv.git
        [[ ! -e fxops_docker ]] && git clone git@github.com:pfcarrier/fxops_docker.git
        [[ ! -e dot-files ]] && git clone git@github.com:pfcarrier/dot-files.git
        true # prevent sub shell return code to be false from the last "if"
      )
      ;;
    *)
      echo "FATAL:  unknown option '$args'"
      exit 1
      ;;
  esac
done

echo "complete"
